#include <iostream>
#include <vector>

using namespace std;

class HeapSort {
public:
    HeapSort(vector<int>& arr);
    void sort();
    void printSortedArray();

private:
    vector<int> array;
    int heapSize;

    void buildMaxHeap();
    void maxHeapify(int i);
    void swap(int& a, int& b);
};

HeapSort::HeapSort(vector<int>& arr) : array(arr) {
    heapSize = arr.size();
}

void HeapSort::swap(int& a, int& b) {
    int temp = a;
    a = b;
    b = temp;
}

void HeapSort::maxHeapify(int i) {
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < heapSize && array[left] > array[largest]) {
        largest = left;
    }

    if (right < heapSize && array[right] > array[largest]) {
        largest = right;
    }

    if (largest != i) {
        swap(array[i], array[largest]);
        maxHeapify(largest);
    }
}

void HeapSort::buildMaxHeap() {
    for (int i = heapSize / 2 - 1; i >= 0; i--) {
        maxHeapify(i);
    }
}

void HeapSort::sort() {
    buildMaxHeap();
    
    for (int i = heapSize - 1; i > 0; i--) {
        swap(array[0], array[i]);
        heapSize--;
        maxHeapify(0);
    }
}

void HeapSort::printSortedArray() {
    for (int i = 0; i < array.size(); i++) {
        cout << array[i] << " ";
    }
    cout << endl;
}

int main() {
    vector<int> arr = {12, 11, 13, 5, 6, 7};
    
    HeapSort heapSort(arr);
    cout << "Original array: ";
    heapSort.printSortedArray();

    heapSort.sort();
    cout << "Sorted array: ";
    heapSort.printSortedArray();

    return 0;
}
