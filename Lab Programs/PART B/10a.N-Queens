#include <iostream>
#include <vector>

using namespace std;

class NQueens {
public:
    NQueens(int n);
    void solveNQueens();
    
private:
    int boardSize;
    vector<vector<string>> solutions;
    vector<int> queens;

    bool isSafe(int row, int col);
    void solveNQueensHelper(int row);
    void printSolution(const vector<int>& queens);
};

NQueens::NQueens(int n) : boardSize(n) {
    solutions.clear();
    queens.resize(n, -1);
}

bool NQueens::isSafe(int row, int col) {
    for (int i = 0; i < row; ++i) {
        if (queens[i] == col || abs(queens[i] - col) == abs(i - row)) {
            return false;
        }
    }
    return true;
}

void NQueens::printSolution(const vector<int>& queens) {
    vector<string> solution;
    for (int i = 0; i < boardSize; ++i) {
        string row(boardSize, '.');
        row[queens[i]] = 'Q';
        solution.push_back(row);
    }
    solutions.push_back(solution);
}

void NQueens::solveNQueensHelper(int row) {
    if (row == boardSize) {
        printSolution(queens);
        return;
    }

    for (int col = 0; col < boardSize; ++col) {
        if (isSafe(row, col)) {
            queens[row] = col;
            solveNQueensHelper(row + 1);
            queens[row] = -1; // Backtrack
        }
    }
}

void NQueens::solveNQueens() {
    solveNQueensHelper(0);
    
    for (const vector<string>& solution : solutions) {
        for (const string& row : solution) {
            cout << row << endl;
        }
        cout << endl;
    }
}

int main() {
    int n;
    cout << "Enter the board size (N): ";
    cin >> n;

    NQueens nQueens(n);
    nQueens.solveNQueens();

    return 0;
}
